<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[培训机构的忽悠招数]]></title>
    <url>%2F2017%2F10%2F30%2F%E5%9F%B9%E8%AE%AD%E6%9C%BA%E6%9E%84%E7%9A%84%E5%BF%BD%E6%82%A0%E6%8B%9B%E6%95%B0%2F</url>
    <content type="text"><![CDATA[在上个星期六，睡着睡着一个电话吵醒了我，电话的另一边是自称达内公司的人事部经理，说在前程无忧上看到我的简历，邀请我去他们公司面试web前端。我心想反正睡醒没事而且也还没找到工作就答应下午去看看。 到了那里，发现好像挺小的，前台让我登记了下就让我去会议室等他们叫我面试，正好过了会见到一个同学也来了，于是我们一起在那里等。过了没多久就带我去另一个办公室了，面试我的依然是那个人事部经理，她先让我自我介绍，随后问了我一些我做过的项目的负责功能，之后问题来了。 经理：我看你的简历好像前端这一块了解得不是挺深入。 我：还好吧，起码东西是能写出来的。 经理：唔……你了解我们公司吗？ 我：额，不是很了解。 经理：那我跟你介绍一下吧，我们公司是一家已经成立十五年的互联网公司，现在已经在美国纳斯达克上市blabla…… 我：哦这样啊~ 经理：我们公司现在主要是以Java为主，你再学校有学过这方面的内容吗？ 我：有，老师有教过。 经理：有学过就好，因为我们是以Java开发为主的，就算是学得不是很好我们也有人来带你做些实训啊之类让你可以早点上手再开始上岗。所以你有兴趣考虑转到Java吗？ 我（反正也还没找到工作，先看下会教什么吧）：可以的。 经理：好，那你明天再过来一下，明天刚好有个项目答辩，项目经理也在，让他带你旁听一下怎样项目答辩的，因为你以后做完项目也是要答辩的，然后让他问你一些专业技能上的问题，考核一下你。 我：好的。 对于一上来什么技术都不问又不用考试就说一大堆的，讲真我是有点怀疑。回到宿舍之后我查了下他们的公司，一上百度输入达内，马上弹出提示框：达内培训。 好了，估计是培训公司了，不过我也不太确定，因为他那里地方看起来有点小，如果是培训公司应该会有挺大的地方讲课的，所以我还是打算明天去一趟观察情况，刚好同学也说让他明天也去，于是就约明天一起了。 第二天早上九点，我们到了那里，他们也刚好开门，让我们等一下。大概过了10分钟，昨天的经理带着一个人叫我们过去，那个人就是项目经理，她上来就问了我们一些问题，不过大部分是Java的，同学答得也不是很好，而问我的一些关于前端的问题就有部分问得比较奇怪了，例如什么jQuery是什么，她这样问我都不知道该答什么怎么答，就答了她一些用途算了。面完之后她跟经理出去外面聊了下进来对我们（我和同学两个一起面试的）说“你们的基础不太好，可能要带着你们做些实训项目这样学习一下才行”，然后就带我们去了隔壁，原来这写字楼整一层都是他们的，难怪在前台看着这么小，原来都在两边。 一进去，好了，一堆电脑，一台投影，跟中软一模一样，只是小了很多而已。跟同学说了下，他还是心怀少少希望的样子“应该不是让我们来培训吧，他们这些应该是自己报名的”。抱着不太好意思直接走的心，我跟他一起听完了整个答辩，然后又回到办公室跟经理谈话。 经理：感觉怎样？ 我：还行。 经理：嗯，那就好，你们以后每做完一个项目也会像刚刚那样进行答辩的。那么星期一你们过来让项目经理考核一下，然后带着做下实训，做几天看看怎样吧。 同学：这个培训完是要怎样的？ 经理：培训完就上岗。 同学：是在你们公司还是在…… 经理：在我们公司也行，也可以去我们的合作企业。 同学：那培训的过程要我们交什么相关的费用吗？ 经理：不用，全程都不用交钱的，公司会帮你们垫付。 机智的我眉头一皱好像发现有什么不对 我：等下，这个垫付是我们还是要交钱的意思吗？ 经理：不是，你们什么都不用交，过来然后做实训培训就好，不会让你们交钱的，放心吧。 我：如果这样的话我还是不懂你这个垫付是什么意思。 经理：……就是我们公司会帮你付了，你们不用交，等出来工作之后再一部分一部分的还，每个月都不用很多的，也就1000左右。 之后的事情应该不用说了，这家公司跟网上所流传的培训公司一样，我本身就是不想培训，如果要培训的话干嘛不暑假直接在中软待，起码都感受过究竟怎样的。所以我跟同学拒绝之后就走了。 真爱金钱，远离培训]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[今日感想]]></title>
    <url>%2F2017%2F10%2F27%2F%E4%BB%8A%E6%97%A5%E6%84%9F%E6%83%B3%2F</url>
    <content type="text"><![CDATA[今天第一次一个人出远门，算是说走就走的了，带了几份简历就独自一人从中山泡到广州，虽然路途不算远，不过也是出了次市了，以前基本上都是别人带我才能出门了。 跨市去找工作真的不容易啊，人生地不熟，来回又成问题，像今天第一场去的暨大的招聘会，下课了过去北门搭公交，发现公交刚走，于是开始了第一次的滴滴，到了广州南坐地铁到那边的地铁站，然后坐公交，公交的广播又小声，搞得我听不到是哪个站，只能跟住一堆像学生（女生）的下了车，然后发现……人家是来玩了。于是就悲催了，那个地方离高德导航是我原来地铁站的反方向，第二次滴滴到暨大。在里面走了很久（人家学校大）才到了地方，因为是第一次面试而且是来到人家重本的地盘，难免会紧张，虽然第一次面试感觉还好，不过面试官最后没发小纸条给我让我网上投多一次，我见前面有个会让他这样的，so，估计GG。然后第二个面的时候感觉没第一个的好，但是给我发了小纸条，不过……人家只收一个，so，继续GG。 搞完这些估计脑子都不够用了，连续坐错几次公交，走了好多冤枉路，于是就第三次滴滴到地铁站，去广工找朋友，结果饭没吃到，人只见到了然后一起去买了个汉堡就走了，最后没准时到广财的另一个7点开始的宣讲会，不过那个坑逼宣讲会足足讲了两个钟才开始笔试，搞得我做好的一切准备都没了，九点半匆匆忙忙做完第四次打滴滴尝试抢救一下看能不能回去，发现最后还是GG了，不想麻烦朋友就没去他宿舍了毕竟不是他一个人，想了下顺风车回来好像比住一晚再坐轻轨便宜就直接坐了。然后又发现那个司机的车型跟车牌与滴滴上登记的都不一样，我就开始慌了，能不能顺利到看今晚吧，反正前前后后比我计划的多花了差不多一百吧应该。 唉，只能说想得太好，意外太多，我不是超人我也会sad，尤其是这种时候，自己能力不够又不想向现实屈服，只能自己拼一把看能不能混到一份心仪的工作了PS：心情不好懒得排版了，将就看吧 梦想很大本事很小 每条咸鱼都有梦想，就像癞蛤蟆想吃天鹅肉，但咸鱼终究是咸鱼，癞蛤蟆终究是癞蛤蟆，变不了的……]]></content>
      <categories>
        <category>心情</category>
      </categories>
      <tags>
        <tag>sad</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[网络学习笔记二]]></title>
    <url>%2F2017%2F08%2F08%2F%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%BA%8C%2F</url>
    <content type="text"><![CDATA[网络学习笔记二：向DNS服务器查询Web服务器的IP地址生成HTTP消息后，委托操作系统将消息发给服务器，因为发送消息功能对所有的应用程序都通用，所以可以让操作系统实现，而且浏览器也只能解析网址生成HTTP消息，本身没发消息到网络的功能。 发送消息时，需要有通信对象的IP地址而不是域名，所以要根据域名找IP地址。 简单的局域网介绍基于TCP/IP，由集线器连接的几台计算机为一个子网，如果一台集线器连接不了那么多则增加集线器并把集线器互相连接起来，由这些子网通过路由器连接起来就是一个网络。一般家里的路由器都内置了集线器功能。 消息发送流程消息经过子网的集线器到达离发送者最近的路由器上，再根据消息的目的地判断下一个路由的位置，再发送出去下一个路由器，重复这些过程知道传到目的地。 IP地址表示方法 一串32比特（bit）的数字，按照8比特（1字节即1Byte）一组分成4组用十进制表示再用圆点隔开。 IP地址主体：192.168.1.1 IP地址/子网掩码：192.168.1.1/255.255.255.0 用网络号比特数表示子网掩码：192.168.1.1/24（24表示在二进制中有24个连续的1，255表示8个1的值，子网掩码一般为24，如果是其他例如25则是255.255.255.128，128是10000000） 表示整个子网：192.168.1.0/24 主机号全为0 表示子网内广播的地址：192.168.1.255/24 主机号全为1，表示对整个子网进行广播，即向子网上所有设备发包。 子网掩码：左边全为1右边全为0，1部分表示网络号，0为主机号。 域名与IP并用的理由 光用IP：难记，域名比较好记。 光用域名（Windows网络的原型PC-Networks实现过）：运行效率不高，IP地址长度为32比特（4字节），域名最短也要几十个字节，而且长度不固定，传送、处理数据就要更长时间，就算技术发展得快以后路由器性能会提升，数据量也会变大，所以也不适合。 查询IP地址询问最近的DNS服务器：“XXX域名的IP是多少”，通过DNS查询IP地址叫域名解析，负责解析的为解析器，解析器是一段运行在计算机上的程序，包含在操作系统的Socket库中。 调用解析器后，解析器会向DNS服务器发送查询消息，然后DNS服务器返回响应消息，其中包含查到的IP地址，解析器取出IP地址写入浏览器指定的内存地址中，这样就完成了IP地址的查询。当浏览器向Web服务器发消息时，就从该内存地址取出IP并与HTTP请求消息一起交给操作系统就行了。 HTTP消息是用文本编写的，DNS消息是用二进制数据编写的。 调用解析器的工作流程 浏览器执行调用解析器指令。 Socket库中的解析器生成给DNS服务器的查询消息，交给操作系统内部协议栈。 操作系统内部协议栈发送UDP消息（因为解析器也没使用网络收发数据的功能，协议栈为TCP/IP驱动） 消息从网卡发到DNS服务器，处理完后再从网卡返回到协议栈。 协议栈接收DNS服务器的响应消息传给解析器。 Socket库中的解析器接收传过来的响应消息，从响应中取出IP地址存放在浏览器置顶的内存地址上。 浏览器取出IP地址执行之后的操作。 DNS服务器接收来自客户端的查询消息包括以下3种：域名（服务器名称、邮件服务器即@后面部分的名称）；Class，固定为IN（当初设计用来识别互联网外的网络，不过现在没其他网络了）；记录类型，A为域名对应的IP地址，MX为域名对应邮件服务器，CNAME为查询域名相关别名（关联在一起的其他域名），对不同的记录类型返回的响应数据也不一样。 域名层次结构最顶级为根域DNS服务器，分配给根域DNS服务器的IP全世界只有13个，不过因为它在运营上是用堕胎服务器对应一个IP地址的，所以服务器的数量还是很多。根域一般忽略不写，不然就要在域名最后加一个圆点像www.baidu.com. 根域里存放着像com，jp之类的顶级域的DNS服务器信息，这些顶级域又存放着下一级DNS服务器的信息如baidu，这样根据圆点来分割从后往前逐级递减。 查找响应DNS服务器并获取IP地址假设一个服务器只有一个域，计算机先找到最近的DNS服务器，没找到该域名的信息则从根域的DNS服务器找，根域的DNS服务器没找到这个域名的信息，不过判断出这个域名属于com域的，所以返回它所管理的com域的IP地址；然后最近的DNS服务器再查找com域的DNS服务器，没找到不过判断出是属于它管理的XXX域，所以返回XXX域的IP地址；然后最近的DNS服务器再找XXX域的DNS服务器…以此类推直到找到目标的的DNS服务器，然后发送查询信息就能得到这个域名的IP地址。 一般一个服务器会有多个域，所以会减少很多步的查找，而且DNS服务器会缓存起查找过的域名，一旦要查找会先检查缓存中有无保存该域名的相关信息，有就直接返回响应，没有再逐层去查找。 委托协议栈发送消息知道IP地址后就可以委托协议栈向向这个IP地址，即Web服务器发HTTP消息了。 HTTP消息都是数字消息，收发数字消息和通过DNS查询IP对所有网络应用程序都通用。 委托协议栈收发数据要按顺序调用多个Socket库中的组件，操作大概为： 创建套接字，就是在收发数据的两台计算机上建立数据出入口。 将类似管道的东西连接到服务器端的套接字上，因为一般都是服务器先创建然后等客户端连接上来，这样就完成了连接。（管道就是一条数据通路，为了好理解叫管道，建立管道的关键是两端都有数据出入口即套接字，把套接字连起来就形成管道了） 收发数据，连接成功后就可以在管道中双向传输数据。 断开管道并删除套接字，收发数据结束后由任一方发起断开连接，断开后套接字也会删除，通信结束。 下面是详细一点的过程 创建套接字调用Socket库中socket组件返回一个识别不同套接字的描述符（计算机会同时进行多个数据通信，用不同的套接字），相当于寄存行李时的号码牌对应你的行李。 连接阶段调用Socket库的connect组件，需要指定描述符，服务器IP和端口号（描述符是指明使用哪个应用程序进行通信，服务器不知道这个值，所以要IP地址和端口号识别是哪台计算机） 通信阶段调用Socket库的write组件，需要指定描述符和发送的数据，然后发到服务器，再用read组件把响应消息放到接收缓冲区中（应用程序内的一块内存空间） 断开阶段调用Socket库的close组件，当所有数据请求完成后触发close]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[每个人都会死但我不会！（误）]]></title>
    <url>%2F2017%2F08%2F07%2F%E6%AF%8F%E4%B8%AA%E4%BA%BA%E9%83%BD%E4%BC%9A%E6%AD%BB%E4%BD%86%E6%88%91%E4%B8%8D%E4%BC%9A%EF%BC%81%EF%BC%88%E8%AF%AF%EF%BC%89%2F</url>
    <content type="text"><![CDATA[每个人都会死但我不会！(始) 最近在看一本书，关于生死哲学的（对，哲♂学），就随便写些感想之类吧，毕竟就像书上说的那样，每个人都知道死，但是在想到这个的时候都是会非常的恐惧。 每个人都会死，但我（总以为自己）不会，去掉括号就是书的名字了，但我总是喜欢跟朋友说但我不会，可能这比较暴力吧-.- 其实呢，我也想过死到底是怎样的，是不是像睡觉那样，一旦睡着了就什么都不知道了，连过了多久都不知道，可能唯一不同的是睡觉不管睡多久，但总会醒来，而死就是永远都醒不来了。以前曾经感性的以为吃安眠药过多而死的是因为分量太多了，让人会一直睡下去睡到不知道什么时候醒来，就等于死亡了。 你真的觉得自己会死吗？ 发自内心地这么认为吗？ 你真的觉得生命有一天会终结吗？ 这就是书最开始提出的三个问题，相信很多人都能回答出来。但我们在思考这些问题的时候也会想过： 我们能不能不死，怎样才能永生 相信很多人都有过这样的想法，毕竟死亡真的让人觉得可怕，再也不能见到自己想见的人了，亲人朋友伤心，再也不能和自己聊天了，身体也慢慢变冷、变僵，最后的最后，化成一堆骨灰，就这样在世界上没了痕迹。 丹麦哲学家索伦·克尔凯郭尔认为，超越死亡焦虑的唯一方法就是去经历死亡。所有抑制对死亡的想法的行为都只会适得其反，而我们接触永恒的唯一方法就是接受虚无的焦虑感。 个人认为大概就是表示如果想不再对死亡产生恐惧的方法只有经历一次死亡吧，就像那些军人、消防战士，他们每一次任务都有可能经历死亡：军人被敌人包围、身受重伤的时候，消防战士在进火场救人的时候被困在缺氧的房间里。估计那些时候他们都是想着自己要死了，听说每个人死亡之前都会把自己一生像幻灯片那样播放一边在眼前，可能真正到了那个时候我们才会发现原来自己的一生过得没那么的无聊，那么多遗憾，也很精彩，这时才会接受死亡这件事实吧。当然那些还有很大毅力的人会拼命的想要活下来，这就要靠个人能不能超越这个境界了。 还有一个冷酷的德国哲学家亚瑟·叔本华说过，“个体的死亡毫无影响，所以我们的死亡对整个人类应该是无关紧要的事” 这个观点的另一面是积极的，就像鲁迅说过的：有的人死了，但他还活着。一个人如果为他人，为世界创造了很多东西，那就会有很多人会记得他，怀念他，从某种意义上说就相当于实现了永生：世界因你而改变，周围的人都记得你的存在，一个人因为有意志而可以有灵魂的存在世上，死后你的意志还继续存在这世上，这不就是永生么。不过也有人不同意这样 哲学家伍迪·艾伦说：我不想活在祖国人民的心中，我只想火灾我的公寓里。 这个应该比较现实，跟我们大部分人的想法都一样，就算我们活着多少个人的心中，我们的意志存在在这个世上，但我们的灵魂、心智还是不在了，用个不太合适的比喻吧，就像我有5块钱，我把它花在慈善上了，贫困人民会感激我记得我，我的5块钱也还存在世上，在他们口袋里，但不能说我就还有钱（乱七八糟的什么东西哦-.-） 今天就到这里算了，乱七八糟的说了一大堆奇怪的东西…（其实主要是博客搭着没东西放感觉不太好，以后不定时都会上来发下文章吧，就这样~） 你明明知道是在机场等一艘船，那你还在坚持什么呢？]]></content>
      <categories>
        <category>感想</category>
      </categories>
      <tags>
        <tag>读书有感</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[网络学习笔记一]]></title>
    <url>%2F2017%2F08%2F05%2F%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%80%2F</url>
    <content type="text"><![CDATA[网络学习笔记一：生成HTTP请求消息 小知识网页打不开，QQ能上：DNS不对，QQ是直接使用IP地址来连接服务器的，可以由此判断 网络是由什么组成的网络是由负责将数字信息搬运到指定目的地的机制加上浏览器和Web服务器这些网络应用程序组成的。其中数字信息指浏览器与服务器间传递的请求和响应（二进制） URL（同一资源定位符）http://user:password@www.lab.glasscom.com:80/dir/file.html http user:password@ www.lab.glasscom.com :80 /dir/file.html 浏览器应用的通信协议 用户名，密码，可省略 Web服务器域名 端口号，默认80，可省略 文件路径名 http://www.lab.glasscom.com/dir/访问当前目录下服务器设置的默认文件名，一般为index.html，即访问http://www.lab.glasscom.com/dir/index.html http://www.lab.glasscom.com/访问“/”目录下的默认文件名，“/”目录一般指根目录 http://www.lab.glasscom.com同上 http://www.lab.glasscom.com/whatisthis一般来说如果服务器上有whatisthis文件则将whatisthis作为文件名处理；有这个目录则作为目录名来处理。我们无法创建两个名字相同的目录和文件（指Linux系统的统一目录下，因为Linux下一切都是文件） HTTPHTTP协议定义了客户端和服务器之间交互的消息内容和步骤。客户端向服务器发送请求消息，消息包含“对什么目标”和“进行怎样的操作”。“对什么目标”为URI（统一资源标识符），即各种访问的目标，如各种文件名（/dir/file.html）或http:开头的URL；“进行怎样的操作”为方法，表示需要Web服务器完成怎样的工作，如GET，POST，PUT，HEAD，DELETE等都是方法。 收到请求消息后，服务器通过URI和方法来完成自己的工作，再把结果存在响应消息中，响应的开头有个状态码用来表示操作的执行结果，如200，404，500，503。客户端收到响应后从消息中读出所需数据显示在屏幕上。 请求的方法： GET：一般访问服务器获取网页数据就是用GET方法。请求消息中写上GET方法，URI写上存放网页数据的文件名“/dir/file.html”表示要获取该文件的数据，然后将读取到的数据存在响应消息中并返回给客户端，客户端收到并显示出来。 POST：在表单中填写数据，使用POST方法比较多，URI指向服务器中一个应用程序的文件名如index.php，再加上要传递的数据data，一般为表单内容，服务器收到处理后放入响应返回客户端。 请求与响应1.生成HTTP请求消息：解析完URL，确定了Web服务器和文件名，然后生成HTTP请求消息，有严格规定的格式 信息 内容 备注 请求消息： &lt;方法&gt;&lt;空格&gt;&lt; URI&gt;&lt;空格&gt;&lt; HTTP版本&gt; 第一行为请求行，可以大概了解请求内容 &lt;字段名&gt;:&lt;字段值&gt; 消息头，每行包含一个头字段，用于表示请求的附加消息，可以有多行 …… …… &lt;空行&gt; &lt;消息体&gt; 包含客户端向服务器发送的数据如POST方法的表单数据 GET方法发送的数据最多为几百个字节 2.收到响应 信息 内容 备注 请求消息： &lt; HTTP版本&gt;&lt;空格&gt;&lt;状态码&gt;&lt;空格&gt;&lt;响应短语&gt; 状态行，其中响应短语是用来解释状态码的短语 &lt;字段名&gt;:&lt;字段值&gt; 消息头 …… …… &lt;空行&gt; &lt;消息体&gt; 包含服务器向客户端发送的数据，消息体的内容格式由消息头中的Content-Type字段定义 响应消息格式如上，状态码和响应短语是一一对应的，用来表示请求的结果，状态码是数字，主要用来告知程序结果；响应短语是文字，主要用来向人们告知结果。 状态码第一位数字为状态类型，二、三位为具体情况 1XX:告知请求的处理进度和情况 2XX:成功 3xx:表示需要进一步操作 4xx:客户端错误 5XX:服务器错误 返回响应消息后，如果网页内容只有文字，浏览器会把数据提取并显示在屏幕上；如果有图片等资源，则会在网页响应位置嵌入一个如&lt;img src=&quot;...&quot;&gt;的标签的控制信息，当浏览器显示文字时遇到这些标签，则在屏幕上留个位置出来，然后再次访问服务器，按照src中的文件名向服务器发送请求获取图片并显示到响应位置，这个请求与获取网页文件方式一样，只是URI部分改为src的。但由于每条请求消息只能写一个URI，所以每次只能获取1个文件，如果要获取多个文件就要发多几次请求，如一个网页有3张图片，则一共要发4次请求给服务器才能显示网页和图片，而这些工作全是浏览器负责的，服务器只负责对每一条请求返回一条响应。]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[再次尝试改博客]]></title>
    <url>%2F2017%2F06%2F10%2F%E5%86%8D%E6%AC%A1%E5%B0%9D%E8%AF%95%E6%94%B9%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[上次配置东西的时候多了个标签页，但是访问不到，这次试下能不能弄好。（第二天）好吧不知道为何那个部署会部署不到，如果是选部署地址为自己github地址的话hexo d显示success之后并没什么反应，选另一种的话直接报错。小小笔记：hexo n #写文章 hexo g #生成 hexo d #部署 #可与hexo g合并为 hexo d -g 不过这些都要在控制台里输入，用atom的hexo插件输入没用，特指部署这一步，原因我也不知道... 你明明知道是在机场等一艘船，那你还在坚持什么呢？]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>随手做做</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2017%2F02%2F17%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>