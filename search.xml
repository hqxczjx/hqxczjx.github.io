<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[网络学习笔记一]]></title>
    <url>%2F2017%2F08%2F05%2F%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%80%2F</url>
    <content type="text"><![CDATA[网络学习笔记一：生成HTTP请求消息 小知识网页打不开，QQ能上：DNS不对，QQ是直接使用IP地址来连接服务器的，可以由此判断 网络是由什么组成的网络是由负责将数字信息搬运到指定目的地的机制加上浏览器和Web服务器这些网络应用程序组成的。其中数字信息指浏览器与服务器间传递的请求和响应（二进制） URL（同一资源定位符）http://user:password@www.lab.glasscom.com:80/dir/file.html http user:password@ www.lab.glasscom.com :80 /dir/file.html 浏览器应用的通信协议 用户名，密码，可省略 Web服务器域名 端口号，默认80，可省略 文件路径名 http://www.lab.glasscom.com/dir/访问当前目录下服务器设置的默认文件名，一般为index.html，即访问http://www.lab.glasscom.com/dir/index.html http://www.lab.glasscom.com/访问“/”目录下的默认文件名，“/”目录一般指根目录 http://www.lab.glasscom.com同上 http://www.lab.glasscom.com/whatisthis一般来说如果服务器上有whatisthis文件则将whatisthis作为文件名处理；有这个目录则作为目录名来处理。我们无法创建两个名字相同的目录和文件（指Linux系统的统一目录下，因为Linux下一切都是文件） HTTPHTTP协议定义了客户端和服务器之间交互的消息内容和步骤。客户端向服务器发送请求消息，消息包含“对什么目标”和“进行怎样的操作”。“对什么目标”为URI（统一资源标识符），即各种访问的目标，如各种文件名（/dir/file.html）或http:开头的URL；“进行怎样的操作”为方法，表示需要Web服务器完成怎样的工作，如GET，POST，PUT，HEAD，DELETE等都是方法。 收到请求消息后，服务器通过URI和方法来完成自己的工作，再把结果存在响应消息中，响应的开头有个状态码用来表示操作的执行结果，如200，404，500，503。客户端收到响应后从消息中读出所需数据显示在屏幕上。 请求的方法： GET：一般访问服务器获取网页数据就是用GET方法。请求消息中写上GET方法，URI写上存放网页数据的文件名“/dir/file.html”表示要获取该文件的数据，然后将读取到的数据存在响应消息中并返回给客户端，客户端收到并显示出来。 POST：在表单中填写数据，使用POST方法比较多，URI指向服务器中一个应用程序的文件名如index.php，再加上要传递的数据data，一般为表单内容，服务器收到处理后放入响应返回客户端。 请求与响应1.生成HTTP请求消息：解析完URL，确定了Web服务器和文件名，然后生成HTTP请求消息，有严格规定的格式 请求消息： &lt;方法&gt;&lt;空格&gt;&lt; URI&gt;&lt;空格&gt;&lt; HTTP版本&gt; 第一行为请求行，可以大概了解请求内容 &lt;字段名&gt;:&lt;字段值&gt; 消息头，每行包含一个头字段，用于表示请求的附加消息，可以有多行 …… …… &lt;空行&gt; &lt;消息体&gt; 包含客户端向服务器发送的数据如POST方法的表单数据 GET方法发送的数据最多为几百个字节 2.收到响应 请求消息： &lt; HTTP版本&gt;&lt;空格&gt;&lt;状态码&gt;&lt;空格&gt;&lt;响应短语&gt; 状态行，其中响应短语是用来解释状态码的短语 &lt;字段名&gt;:&lt;字段值&gt; 消息头 …… …… &lt;空行&gt; &lt;消息体&gt; 包含服务器向客户端发送的数据，消息体的内容格式由消息头中的Content-Type字段定义 响应消息格式如上，状态码和响应短语是一一对应的，用来表示请求的结果，状态码是数字，主要用来告知程序结果；响应短语是文字，主要用来向人们告知结果。 状态码第一位数字为状态类型，二、三位为具体情况 1XX:告知请求的处理进度和情况 2XX:成功 3xx:表示需要进一步操作 4xx:客户端错误 5XX:服务器错误 返回响应消息后，如果网页内容只有文字，浏览器会把数据提取并显示在屏幕上；如果有图片等资源，则会在网页响应位置嵌入一个如&lt;img src=&quot;...&quot;&gt;的标签的控制信息，当浏览器显示文字时遇到这些标签，则在屏幕上留个位置出来，然后再次访问服务器，按照src中的文件名向服务器发送请求获取图片并显示到响应位置，这个请求与获取网页文件方式一样，只是URI部分改为src的。但由于每条请求消息只能写一个URI，所以每次只能获取1个文件，如果要获取多个文件就要发多几次请求，如一个网页有3张图片，则一共要发4次请求给服务器才能显示网页和图片，而这些工作全是浏览器负责的，服务器只负责对每一条请求返回一条响应。]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[再次尝试改博客]]></title>
    <url>%2F2017%2F06%2F10%2F%E5%86%8D%E6%AC%A1%E5%B0%9D%E8%AF%95%E6%94%B9%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[上次配置东西的时候多了个标签页，但是访问不到，这次试下能不能弄好。（第二天）好吧不知道为何那个部署会部署不到，如果是选部署地址为自己github地址的话hexo d显示success之后并没什么反应，选另一种的话直接报错。 你明明知道是在机场等一艘船，那你还在坚持什么呢？]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>随手做做</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2017%2F02%2F17%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>